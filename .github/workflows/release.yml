name: Release
on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Use Golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.19"

      -
        name: Build with xgo
        uses: crazy-max/ghaction-xgo@v1
        with:
          xgo_version: latest
          go_version: ${{ matrix.go_version }}
          dest: build
          prefix: xcrack
          pkg: .
          targets: windows/amd64,windows/386,linux/386,linux/amd64,darwin/amd64,darwin/arm64
          v: true
          x: false
          race: false
          ldflags: -s -w
          buildmode: default 

      - name: Set Variable
        run: |
          echo "RELEASE_WIN32=xcrack-${{ github.event.release.tag_name}}windows-32bit" >> $GITHUB_ENV
          echo "RELEASE_WIN64=xcrack-${{ github.event.release.tag_name}}windows-64bit" >> $GITHUB_ENV
          echo "RELEASE_OSX_AMD64=xcrack-${{ github.event.release.tag_name}}osx-AMD-64bit" >> $GITHUB_ENV
          echo "RELEASE_OSX_ARM64=xcrack-${{ github.event.release.tag_name}}osx-ARM-64bit" >> $GITHUB_ENV
          echo "RELEASE_Linux386=xcrack-${{ github.event.release.tag_name}}linux-x86" >> $GITHUB_ENV
          echo "RELEASE_LinuxAMD64=xcrack-${{ github.event.release.tag_name}}linux-amd64" >> $GITHUB_ENV
      - name: Build zip
        run: |
          mv build/xcrack-windows*386.exe "$RELEASE_WIN32".exe
          mv build/xcrack-windows*amd64.exe "$RELEASE_WIN64".exe
          mv build/xcrack-darwin-*amd64 "$RELEASE_OSX_AMD64"
          mv build/xcrack-darwin-*arm64 "$RELEASE_OSX_ARM64"
          mv build/xcrack-linux-*386 "$RELEASE_Linux386"
          mv build/xcrack-linux-*amd64 "$RELEASE_LinuxAMD64"
          zip "$RELEASE_WIN32".zip "$RELEASE_WIN32".exe
          zip "$RELEASE_WIN64".zip "$RELEASE_WIN64".exe
          zip "$RELEASE_OSX".zip "$RELEASE_OSX"
          zip "$RELEASE_LinuxARM".zip "$RELEASE_LinuxARM"
          zip "$RELEASE_Linux386".zip "$RELEASE_Linux386"
          zip "$RELEASE_LinuxAMD64".zip "$RELEASE_LinuxAMD64"
          zip "$RELEASE_LinuxARM64".zip "$RELEASE_Linux386"


      - name: Create Release
        id: create_release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release - Windows 64bit
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_WIN64 }}.zip
          asset_name: ${{ env.RELEASE_WIN64 }}.zip
          asset_content_type: application/zip

      - name: Upload Release - Windows 32bit
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_WIN32 }}.zip
          asset_name: ${{ env.RELEASE_WIN32 }}.zip
          asset_content_type: application/zip

      - name: Upload Release - Darwin amd64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_OSX_AMD64 }}.zip
          asset_name: ${{ env.RELEASE_OSX_AMD64 }}.zip
          asset_content_type: application/zip

      - name: Upload Release - Darwin arm64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_OSX_ARM64 }}.zip
          asset_name: ${{ env.RELEASE_OSX_ARM64 }}.zip
          asset_content_type: application/zip


      - name: Upload Release - Linux amd64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_LinuxAMD64 }}.zip
          asset_name: ${{ env.RELEASE_LinuxAMD64 }}.zip
          asset_content_type: application/zip

      - name: Upload Release - Linux 386
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_Linux386 }}.zip
          asset_name: ${{ env.RELEASE_Linux386 }}.zip
          asset_content_type: application/zip
